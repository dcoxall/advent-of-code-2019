# Day 3: Crossed Wires
# https://adventofcode.com/2019/day/3#part2

require 'set'

def calc_new_coordinates(dir, x, y, count)
  # are we changing the y axis
  case dir
  when 'U' then count.times.map { |n| [x, y - (n + 1)] }
  when 'D' then count.times.map { |n| [x, y + (n + 1)] }
  when 'L' then count.times.map { |n| [x - (n + 1), y] }
  when 'R' then count.times.map { |n| [x + (n + 1), y] }
  end
end

input = File.read('./inputs/03.txt')
lines = input.lines.map do |line|
  x, y = [0, 0]
  current_steps = 0
  set = Set.new
  step_lookup = {}

  line.split(',').each do |inst|
    # take everything but the first character and convert it to an integer
    count = inst[1..-1].to_i
    # work out the coordinates generated by this instruction
    coordinates = calc_new_coordinates(inst[0], x, y, count)
    # merge the new coordinates into the set
    set.merge(coordinates)
    # set the x and y coordinate to the last coordinate calculated
    x, y = coordinates.last
    # go through the coordinates and add them to the step_lookup
    coordinates.each do |coord|
      current_steps += 1
      step_lookup[coord] ||= current_steps
    end
  end

  [set, step_lookup]
end

# find the intersection between all lines and convert to an array
crosses = lines.reduce { |a, b| a[0] & b[0] }

# calculate the total steps for each intersection
# sort them then take the first
puts crosses.map { |coord| lines[0][1][coord] + lines[1][1][coord] }.sort.first
